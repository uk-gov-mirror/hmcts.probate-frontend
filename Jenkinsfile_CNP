#!groovy

@Library("Infrastructure") _

String product = "probate"
String component = "frontend"

def secrets = [
  'probate-${env}': [
    secret('testIdamBaseUrl', 'IDAM_API_URL'),
    secret('testIdamLoginUrl', 'IDAM_LOGIN_URL'),
    secret('testUseIdam', 'USE_IDAM'),
    secret('testInviteIdListUrl', 'INVITE_ID_LIST_URL'),
    secret('testPinUrl', 'PIN_URL'),
    secret('testInvitationUrl', 'INVITATION_URL'),
    secret('testIdamAddUserUrl', 'IDAM_ADD_USER_URL'),
    secret('testIdamRole', 'IDAM_CITIZEN_ROLE'),
    secret('testIdamUserGroup', 'IDAM_USER_GROUP'),
    secret('testCitizenDomain', 'CITIZEN_EMAIL_DOMAIN'),
    secret('testEnvEmailAddress', 'TEST_EMAIL_ADDRESS'),
    secret('testEnvMobileNumber', 'TEST_MOBILE_NUMBER'),
    secret('testTerms', 'TERMS_AND_CONDITIONS'),
    secret('testSurvey', 'SURVEY'),
    secret('testsurveyEndOfApplication', 'SURVEY_END_OF_APPLICATION'),
    secret('testPostcodeServiceUrl', 'POSTCODE_SERVICE_URL'),
    secret('testPostCodeAddressToken2', 'ADDRESS_TOKEN'),
    secret('testRunE2ETest', 'RUN_E2E_TEST'),
    secret('testValidationServiceUrl', 'VALIDATION_SERVICE_URL'),
    secret('launchdarkly-key', 'LAUNCHDARKLY_KEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("nodejs", product, component) {
 /*  afterCheckout {
    onMaster {
      try {
        sh """
          git fetch origin demo:demo
          git push --force origin HEAD:demo
        """
            } catch (err) {
                notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
            }
        }
    } */

    after('build') {
        sh 'yarn setup'
    }
//    after('test') {
//        if (env.CHANGE_BRANCH || env.BRANCH_NAME == 'master') {
//            env.PACT_BRANCH_NAME = env.CHANGE_BRANCH
//            env.PACT_BROKER_URL = "https://pact-broker.platform.hmcts.net"
//            if (env.BRANCH_NAME == 'master') {
//                env.PACT_BRANCH_NAME = 'master'
//            }
//            env.PACT_BROKER_VERSION = sh(returnStdout: true, script: 'git rev-parse --verify --short HEAD')
//            sh 'printenv'
//            sh 'yarn test-pact'
//            sh 'yarn publish-pact'
//            sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.63.0/pact-1.63.0-linux-x86_64.tar.gz'
//            sh 'tar xzf pact-1.63.0-linux-x86_64.tar.gz'
//            dir('pact/bin') {
//                sh './pact-broker can-i-deploy --retry-while-unknown=12 --retry-interval=10 -a probate_frontend -b ${PACT_BROKER_URL} -e ${PACT_BROKER_VERSION}'
//            }
//        }
//    }

/*
   before('buildinfra:prod') {
       error 'Deliberately breaking pipeline to prevent prod deployment'
   }
*/

  // installCharts()
  enableAksStagingDeployment()
  disableLegacyDeployment()

  loadVaultSecrets(secrets)
  enableSlackNotifications('#probate-jenkins')

  after('test') {
    publishHTML (target: [
       alwaysLinkToLastBuild: true,
       reportDir: 'output',
       reportFiles: 'results.html',
       reportName: 'Unit Test Results'
    ])
  }

   after('functionalTest:preview') {
    publishHTML target: [
      reportDir            : "functional-output/",
      reportFiles          : "mochawesome.html",
      reportName           : "Preview Functional Tests",
      alwaysLinkToLastBuild: true
    ]
  }

  after('functionalTest:aat') {
    publishHTML target: [
      reportDir            : "functional-output/",
      reportFiles          : "mochawesome.html",
      reportName           : "AAT Functional Tests",
      alwaysLinkToLastBuild: true
    ]
  }
}
